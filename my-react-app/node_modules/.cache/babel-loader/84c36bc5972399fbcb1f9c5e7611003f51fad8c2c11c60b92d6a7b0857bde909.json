{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Grace\\\\OneDrive\\\\Documents\\\\Recipeer (TreeHacks Project)\\\\Recipeer\\\\my-react-app\\\\src\\\\GeminiChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  MODEL_NAME,\n  API_KEY\n} = process.env; // Replace with your actual values\n\nconst GeminiChat = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [response, setResponse] = useState('');\n  const runChat = async () => {\n    const chat = await getChatInstance();\n    try {\n      const result = await chat.sendMessage(userInput);\n      setResponse(result.response.text());\n    } catch (error) {\n      console.error('Error:', error);\n      setResponse('An error occurred. Please try again later.');\n    }\n  };\n\n  // Additional helper functions to manage chat initialization and cleanup (optional)\n  // ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: e => setUserInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: runChat,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(GeminiChat, \"+XGRf1Fg15sHYbV4fDl9lOywMu8=\");\n_c = GeminiChat;\nconst getChatInstance = async () => {\n  const genAI = new GoogleGenerativeAI(API_KEY);\n  const model = genAI.getGenerativeModel({\n    model: gemini - 1.0 - pro\n  });\n  const generationConfig = {\n    temperature: 0.9,\n    topK: 1,\n    topP: 1,\n    maxOutputTokens: 2048\n  };\n  const safetySettings = [{\n    category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n  }\n  // ... other safety settings\n  ];\n  const chat = model.startChat({\n    generationConfig,\n    safetySettings\n    // Include any initial chat history if needed\n  });\n  return chat;\n};\nexport default GeminiChat;\nvar _c;\n$RefreshReg$(_c, \"GeminiChat\");","map":{"version":3,"names":["React","useState","GoogleGenerativeAI","HarmCategory","HarmBlockThreshold","jsxDEV","_jsxDEV","MODEL_NAME","API_KEY","process","env","GeminiChat","_s","userInput","setUserInput","response","setResponse","runChat","chat","getChatInstance","result","sendMessage","text","error","console","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","genAI","model","getGenerativeModel","gemini","pro","generationConfig","temperature","topK","topP","maxOutputTokens","safetySettings","category","HARM_CATEGORY_HARASSMENT","threshold","BLOCK_MEDIUM_AND_ABOVE","startChat","$RefreshReg$"],"sources":["C:/Users/Grace/OneDrive/Documents/Recipeer (TreeHacks Project)/Recipeer/my-react-app/src/GeminiChat.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai';\r\n\r\nconst { MODEL_NAME, API_KEY } = process.env; // Replace with your actual values\r\n\r\nconst GeminiChat = () => {\r\n    const [userInput, setUserInput] = useState('');\r\n    const [response, setResponse] = useState('');\r\n\r\n    const runChat = async () => {\r\n        const chat = await getChatInstance();\r\n        try {\r\n            const result = await chat.sendMessage(userInput);\r\n            setResponse(result.response.text());\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            setResponse('An error occurred. Please try again later.');\r\n        }\r\n    };\r\n\r\n    // Additional helper functions to manage chat initialization and cleanup (optional)\r\n    // ...\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" value={userInput} onChange={(e) => setUserInput(e.target.value)} />\r\n            <button onClick={runChat}>Send Message</button>\r\n            <p>{response}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst getChatInstance = async () => {\r\n    const genAI = new GoogleGenerativeAI(API_KEY);\r\n    const model = genAI.getGenerativeModel({ model: gemini-1.0-pro });\r\n\r\n    const generationConfig = {\r\n        temperature: 0.9,\r\n        topK: 1,\r\n        topP: 1,\r\n        maxOutputTokens: 2048,\r\n    };\r\n\r\n    const safetySettings = [\r\n        {\r\n            category: HarmCategory.HARM_CATEGORY_HARASSMENT,\r\n            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n        },\r\n        // ... other safety settings\r\n    ];\r\n\r\n    const chat = model.startChat({\r\n        generationConfig,\r\n        safetySettings,\r\n        // Include any initial chat history if needed\r\n    });\r\n\r\n    return chat;\r\n};\r\n\r\nexport default GeminiChat;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,kBAAkB,EAAEC,YAAY,EAAEC,kBAAkB,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7F,MAAM;EAAEC,UAAU;EAAEC;AAAQ,CAAC,GAAGC,OAAO,CAACC,GAAG,CAAC,CAAC;;AAE7C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMgB,OAAO,GAAG,MAAAA,CAAA,KAAY;IACxB,MAAMC,IAAI,GAAG,MAAMC,eAAe,CAAC,CAAC;IACpC,IAAI;MACA,MAAMC,MAAM,GAAG,MAAMF,IAAI,CAACG,WAAW,CAACR,SAAS,CAAC;MAChDG,WAAW,CAACI,MAAM,CAACL,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BP,WAAW,CAAC,4CAA4C,CAAC;IAC7D;EACJ,CAAC;;EAED;EACA;;EAEA,oBACIV,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAOoB,IAAI,EAAC,MAAM;MAACC,KAAK,EAAEd,SAAU;MAACe,QAAQ,EAAGC,CAAC,IAAKf,YAAY,CAACe,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtF5B,OAAA;MAAQ6B,OAAO,EAAElB,OAAQ;MAAAQ,QAAA,EAAC;IAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/C5B,OAAA;MAAAmB,QAAA,EAAIV;IAAQ;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEd,CAAC;AAACtB,EAAA,CAzBID,UAAU;AAAAyB,EAAA,GAAVzB,UAAU;AA2BhB,MAAMQ,eAAe,GAAG,MAAAA,CAAA,KAAY;EAChC,MAAMkB,KAAK,GAAG,IAAInC,kBAAkB,CAACM,OAAO,CAAC;EAC7C,MAAM8B,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;IAAED,KAAK,EAAEE,MAAM,GAAC,GAAG,GAACC;EAAI,CAAC,CAAC;EAEjE,MAAMC,gBAAgB,GAAG;IACrBC,WAAW,EAAE,GAAG;IAChBC,IAAI,EAAE,CAAC;IACPC,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE;EACrB,CAAC;EAED,MAAMC,cAAc,GAAG,CACnB;IACIC,QAAQ,EAAE7C,YAAY,CAAC8C,wBAAwB;IAC/CC,SAAS,EAAE9C,kBAAkB,CAAC+C;EAClC;EACA;EAAA,CACH;EAED,MAAMjC,IAAI,GAAGoB,KAAK,CAACc,SAAS,CAAC;IACzBV,gBAAgB;IAChBK;IACA;EACJ,CAAC,CAAC;EAEF,OAAO7B,IAAI;AACf,CAAC;AAED,eAAeP,UAAU;AAAC,IAAAyB,EAAA;AAAAiB,YAAA,CAAAjB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}