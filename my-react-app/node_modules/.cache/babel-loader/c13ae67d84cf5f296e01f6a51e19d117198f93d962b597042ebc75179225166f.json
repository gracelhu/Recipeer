{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Grace\\\\OneDrive\\\\Documents\\\\Recipeer (TreeHacks Project)\\\\Recipeer\\\\my-react-app\\\\src\\\\GeminiChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai';\nimport './GeminiChat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MODEL_NAME = \"gemini-1.0-pro\";\nconst API_KEY = \"AIzaSyAluPQEGMxGNfrkW92bg8zGu1bjeGdJ7Us\";\nconst GeminiChat = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [response, setResponse] = useState('');\n  const runChat = async () => {\n    const chat = await getChatInstance();\n    try {\n      const result = await chat.sendMessage(userInput);\n      setResponse(result.response.text());\n    } catch (error) {\n      console.error('Error:', error);\n      setResponse('An error occurred. Please try again later.');\n    }\n  };\n  // Format the userInput text box to be bigger \n  // Format the response better, it looks ugly \n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: e => setUserInput(e.target.value),\n      className: \"bigger-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: runChat,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(GeminiChat, \"+XGRf1Fg15sHYbV4fDl9lOywMu8=\");\n_c = GeminiChat;\nconst getChatInstance = async () => {\n  const genAI = new GoogleGenerativeAI(API_KEY);\n  const model = genAI.getGenerativeModel({\n    model: MODEL_NAME\n  });\n  const generationConfig = {\n    temperature: 0.9,\n    topK: 1,\n    topP: 1,\n    maxOutputTokens: 2048\n  };\n  const safetySettings = [{\n    category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n  }];\n  const chat = model.startChat({\n    generationConfig,\n    safetySettings\n    // Include any initial chat history if needed\n  });\n  return chat;\n};\nfunction formatResponse(response) {\n  const lines = response.split('\\n');\n\n  // Define variables to track state\n  let isBold = false;\n  let isList = false;\n  let currentListType = null; // 'bullet' or 'numbered'\n\n  // Create an array to store formatted elements\n  const formattedElements = [];\n  for (const line of lines) {\n    // Reset isList at the beginning of each line\n    isList = false;\n\n    // Check for bold text\n    if (line.startsWith('**')) {\n      isBold = true;\n      // Remove the opening **\n      formattedElements.push( /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: line.slice(2)\n      }, line, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 32\n      }, this));\n    } else if (line.endsWith('**')) {\n      isBold = false;\n      // Remove the closing **\n      formattedElements.push( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: line.slice(0, -2)\n      }, line, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 32\n      }, this));\n    } else if (isBold) {\n      // Continue bold text\n      formattedElements.push( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: line\n      }, line, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 32\n      }, this));\n    } else {\n      // Check for list items\n      if (line.startsWith('*')) {\n        isList = true;\n        // Check for numbered list\n        if (/\\d+\\./.test(line)) {\n          currentListType = 'numbered';\n          formattedElements.push( /*#__PURE__*/_jsxDEV(\"li\", {\n            children: line.slice(3)\n          }, line, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 36\n          }, this));\n        } else {\n          currentListType = 'bullet';\n          formattedElements.push( /*#__PURE__*/_jsxDEV(\"li\", {\n            children: line.slice(2)\n          }, line, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 36\n          }, this));\n        }\n      } else if (isList) {\n        // Continue list item\n        if (currentListType === 'numbered') {\n          formattedElements.push( /*#__PURE__*/_jsxDEV(\"li\", {\n            children: line\n          }, line, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 36\n          }, this));\n        } else {\n          formattedElements.push( /*#__PURE__*/_jsxDEV(\"li\", {\n            children: line.slice(1)\n          }, line, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 36\n          }, this));\n        }\n      } else {\n        // Regular text paragraph\n        formattedElements.push( /*#__PURE__*/_jsxDEV(\"p\", {\n          children: line\n        }, line, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 34\n        }, this));\n      }\n    }\n  }\n  return formattedElements;\n}\nexport default GeminiChat;\nvar _c;\n$RefreshReg$(_c, \"GeminiChat\");","map":{"version":3,"names":["React","useState","GoogleGenerativeAI","HarmCategory","HarmBlockThreshold","jsxDEV","_jsxDEV","MODEL_NAME","API_KEY","GeminiChat","_s","userInput","setUserInput","response","setResponse","runChat","chat","getChatInstance","result","sendMessage","text","error","console","children","type","value","onChange","e","target","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","genAI","model","getGenerativeModel","generationConfig","temperature","topK","topP","maxOutputTokens","safetySettings","category","HARM_CATEGORY_HARASSMENT","threshold","BLOCK_MEDIUM_AND_ABOVE","startChat","formatResponse","lines","split","isBold","isList","currentListType","formattedElements","line","startsWith","push","slice","endsWith","test","$RefreshReg$"],"sources":["C:/Users/Grace/OneDrive/Documents/Recipeer (TreeHacks Project)/Recipeer/my-react-app/src/GeminiChat.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai';\r\nimport './GeminiChat.css'\r\n\r\nconst MODEL_NAME = \"gemini-1.0-pro\";\r\nconst API_KEY = \"AIzaSyAluPQEGMxGNfrkW92bg8zGu1bjeGdJ7Us\";\r\n\r\nconst GeminiChat = () => {\r\n    const [userInput, setUserInput] = useState('');\r\n    const [response, setResponse] = useState('');\r\n\r\n    const runChat = async () => {\r\n        const chat = await getChatInstance();\r\n        try {\r\n            const result = await chat.sendMessage(userInput);\r\n            setResponse(result.response.text());\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            setResponse('An error occurred. Please try again later.');\r\n        }\r\n    };\r\n    // Format the userInput text box to be bigger \r\n    // Format the response better, it looks ugly \r\n    return (\r\n        <div>\r\n            <input type=\"text\" value={userInput} onChange={(e) => setUserInput(e.target.value)} className=\"bigger-input\" />\r\n            <button onClick={runChat}>Send Message</button>\r\n            <p>{response}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst getChatInstance = async () => {\r\n    const genAI = new GoogleGenerativeAI(API_KEY);\r\n    const model = genAI.getGenerativeModel({ model: MODEL_NAME });\r\n\r\n    const generationConfig = {\r\n        temperature: 0.9,\r\n        topK: 1,\r\n        topP: 1,\r\n        maxOutputTokens: 2048,\r\n    };\r\n\r\n    const safetySettings = [\r\n        {\r\n            category: HarmCategory.HARM_CATEGORY_HARASSMENT,\r\n            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n        },\r\n    ];\r\n\r\n    const chat = model.startChat({\r\n        generationConfig,\r\n        safetySettings,\r\n        // Include any initial chat history if needed\r\n    });\r\n\r\n    return chat;\r\n};\r\n\r\nfunction formatResponse(response) {\r\n    const lines = response.split('\\n');\r\n  \r\n    // Define variables to track state\r\n    let isBold = false;\r\n    let isList = false;\r\n    let currentListType = null; // 'bullet' or 'numbered'\r\n  \r\n    // Create an array to store formatted elements\r\n    const formattedElements = [];\r\n  \r\n    for (const line of lines) {\r\n      // Reset isList at the beginning of each line\r\n      isList = false;\r\n  \r\n      // Check for bold text\r\n      if (line.startsWith('**')) {\r\n        isBold = true;\r\n        // Remove the opening **\r\n        formattedElements.push(<h2 key={line}>{line.slice(2)}</h2>);\r\n      } else if (line.endsWith('**')) {\r\n        isBold = false;\r\n        // Remove the closing **\r\n        formattedElements.push(<p key={line}>{line.slice(0, -2)}</p>);\r\n      } else if (isBold) {\r\n        // Continue bold text\r\n        formattedElements.push(<p key={line}>{line}</p>);\r\n      } else {\r\n        // Check for list items\r\n        if (line.startsWith('*')) {\r\n          isList = true;\r\n          // Check for numbered list\r\n          if (/\\d+\\./.test(line)) {\r\n            currentListType = 'numbered';\r\n            formattedElements.push(<li key={line}>{line.slice(3)}</li>);\r\n          } else {\r\n            currentListType = 'bullet';\r\n            formattedElements.push(<li key={line}>{line.slice(2)}</li>);\r\n          }\r\n        } else if (isList) {\r\n          // Continue list item\r\n          if (currentListType === 'numbered') {\r\n            formattedElements.push(<li key={line}>{line}</li>);\r\n          } else {\r\n            formattedElements.push(<li key={line}>{line.slice(1)}</li>);\r\n          }\r\n        } else {\r\n          // Regular text paragraph\r\n          formattedElements.push(<p key={line}>{line}</p>);\r\n        }\r\n      }\r\n    }\r\n  \r\n    return formattedElements;\r\n  }\r\n\r\nexport default GeminiChat;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,kBAAkB,EAAEC,YAAY,EAAEC,kBAAkB,QAAQ,uBAAuB;AAC5F,OAAO,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,UAAU,GAAG,gBAAgB;AACnC,MAAMC,OAAO,GAAG,yCAAyC;AAEzD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMc,OAAO,GAAG,MAAAA,CAAA,KAAY;IACxB,MAAMC,IAAI,GAAG,MAAMC,eAAe,CAAC,CAAC;IACpC,IAAI;MACA,MAAMC,MAAM,GAAG,MAAMF,IAAI,CAACG,WAAW,CAACR,SAAS,CAAC;MAChDG,WAAW,CAACI,MAAM,CAACL,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BP,WAAW,CAAC,4CAA4C,CAAC;IAC7D;EACJ,CAAC;EACD;EACA;EACA,oBACIR,OAAA;IAAAiB,QAAA,gBACIjB,OAAA;MAAOkB,IAAI,EAAC,MAAM;MAACC,KAAK,EAAEd,SAAU;MAACe,QAAQ,EAAGC,CAAC,IAAKf,YAAY,CAACe,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAACI,SAAS,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC/G3B,OAAA;MAAQ4B,OAAO,EAAEnB,OAAQ;MAAAQ,QAAA,EAAC;IAAY;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/C3B,OAAA;MAAAiB,QAAA,EAAIV;IAAQ;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEd,CAAC;AAACvB,EAAA,CAvBID,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAyBhB,MAAMQ,eAAe,GAAG,MAAAA,CAAA,KAAY;EAChC,MAAMmB,KAAK,GAAG,IAAIlC,kBAAkB,CAACM,OAAO,CAAC;EAC7C,MAAM6B,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;IAAED,KAAK,EAAE9B;EAAW,CAAC,CAAC;EAE7D,MAAMgC,gBAAgB,GAAG;IACrBC,WAAW,EAAE,GAAG;IAChBC,IAAI,EAAE,CAAC;IACPC,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE;EACrB,CAAC;EAED,MAAMC,cAAc,GAAG,CACnB;IACIC,QAAQ,EAAE1C,YAAY,CAAC2C,wBAAwB;IAC/CC,SAAS,EAAE3C,kBAAkB,CAAC4C;EAClC,CAAC,CACJ;EAED,MAAMhC,IAAI,GAAGqB,KAAK,CAACY,SAAS,CAAC;IACzBV,gBAAgB;IAChBK;IACA;EACJ,CAAC,CAAC;EAEF,OAAO5B,IAAI;AACf,CAAC;AAED,SAASkC,cAAcA,CAACrC,QAAQ,EAAE;EAC9B,MAAMsC,KAAK,GAAGtC,QAAQ,CAACuC,KAAK,CAAC,IAAI,CAAC;;EAElC;EACA,IAAIC,MAAM,GAAG,KAAK;EAClB,IAAIC,MAAM,GAAG,KAAK;EAClB,IAAIC,eAAe,GAAG,IAAI,CAAC,CAAC;;EAE5B;EACA,MAAMC,iBAAiB,GAAG,EAAE;EAE5B,KAAK,MAAMC,IAAI,IAAIN,KAAK,EAAE;IACxB;IACAG,MAAM,GAAG,KAAK;;IAEd;IACA,IAAIG,IAAI,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;MACzBL,MAAM,GAAG,IAAI;MACb;MACAG,iBAAiB,CAACG,IAAI,eAACrD,OAAA;QAAAiB,QAAA,EAAgBkC,IAAI,CAACG,KAAK,CAAC,CAAC;MAAC,GAApBH,IAAI;QAAA3B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqB,CAAC,CAAC;IAC7D,CAAC,MAAM,IAAIwB,IAAI,CAACI,QAAQ,CAAC,IAAI,CAAC,EAAE;MAC9BR,MAAM,GAAG,KAAK;MACd;MACAG,iBAAiB,CAACG,IAAI,eAACrD,OAAA;QAAAiB,QAAA,EAAekC,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MAAC,GAAxBH,IAAI;QAAA3B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAwB,CAAC,CAAC;IAC/D,CAAC,MAAM,IAAIoB,MAAM,EAAE;MACjB;MACAG,iBAAiB,CAACG,IAAI,eAACrD,OAAA;QAAAiB,QAAA,EAAekC;MAAI,GAAXA,IAAI;QAAA3B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAAC,CAAC;IAClD,CAAC,MAAM;MACL;MACA,IAAIwB,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;QACxBJ,MAAM,GAAG,IAAI;QACb;QACA,IAAI,OAAO,CAACQ,IAAI,CAACL,IAAI,CAAC,EAAE;UACtBF,eAAe,GAAG,UAAU;UAC5BC,iBAAiB,CAACG,IAAI,eAACrD,OAAA;YAAAiB,QAAA,EAAgBkC,IAAI,CAACG,KAAK,CAAC,CAAC;UAAC,GAApBH,IAAI;YAAA3B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqB,CAAC,CAAC;QAC7D,CAAC,MAAM;UACLsB,eAAe,GAAG,QAAQ;UAC1BC,iBAAiB,CAACG,IAAI,eAACrD,OAAA;YAAAiB,QAAA,EAAgBkC,IAAI,CAACG,KAAK,CAAC,CAAC;UAAC,GAApBH,IAAI;YAAA3B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqB,CAAC,CAAC;QAC7D;MACF,CAAC,MAAM,IAAIqB,MAAM,EAAE;QACjB;QACA,IAAIC,eAAe,KAAK,UAAU,EAAE;UAClCC,iBAAiB,CAACG,IAAI,eAACrD,OAAA;YAAAiB,QAAA,EAAgBkC;UAAI,GAAXA,IAAI;YAAA3B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,CAAC;QACpD,CAAC,MAAM;UACLuB,iBAAiB,CAACG,IAAI,eAACrD,OAAA;YAAAiB,QAAA,EAAgBkC,IAAI,CAACG,KAAK,CAAC,CAAC;UAAC,GAApBH,IAAI;YAAA3B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqB,CAAC,CAAC;QAC7D;MACF,CAAC,MAAM;QACL;QACAuB,iBAAiB,CAACG,IAAI,eAACrD,OAAA;UAAAiB,QAAA,EAAekC;QAAI,GAAXA,IAAI;UAAA3B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,CAAC;MAClD;IACF;EACF;EAEA,OAAOuB,iBAAiB;AAC1B;AAEF,eAAe/C,UAAU;AAAC,IAAA0B,EAAA;AAAA4B,YAAA,CAAA5B,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}